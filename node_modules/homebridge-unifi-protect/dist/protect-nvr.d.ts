import { HomebridgePluginLogging, MqttClient } from "homebridge-plugin-utils";
import { ProtectApi, ProtectNvrConfig } from "unifi-protect";
import { ProtectDevice, ProtectNvrSystemInfo } from "./devices/index.js";
import { ProtectDeviceConfigTypes, ProtectDevices } from "./protect-types.js";
import { ProtectEvents } from "./protect-events.js";
import { ProtectNvrOptions } from "./protect-options.js";
import { ProtectPlatform } from "./protect-platform.js";
export declare class ProtectNvr {
    private api;
    config: ProtectNvrOptions;
    private deviceRemovalQueue;
    readonly configuredDevices: {
        [index: string]: ProtectDevices;
    };
    events: ProtectEvents;
    private featureLog;
    private hap;
    private liveviews;
    logApiErrors: boolean;
    readonly log: HomebridgePluginLogging;
    mqtt: MqttClient | null;
    private name;
    nvrHksvErrors: number;
    platform: ProtectPlatform;
    systemInfo: ProtectNvrSystemInfo | null;
    ufp: ProtectNvrConfig;
    ufpApi: ProtectApi;
    private unsupportedDevices;
    constructor(platform: ProtectPlatform, nvrOptions: ProtectNvrOptions);
    private bootstrapNvr;
    login(): Promise<void>;
    private configureNvr;
    private addProtectDevice;
    addHomeKitDevice(device: ProtectDeviceConfigTypes): ProtectDevice | null;
    private discoverAndSyncAccessories;
    private cleanupDevices;
    removeHomeKitDevice(protectDevice: ProtectDevice): void;
    private removeHomeKitAccessories;
    private servePlaylist;
    resetNvrConnection(): Promise<void>;
    private get devicelist();
    private devices;
    deviceLookup(deviceId: string): ProtectDevices | null;
    getFeatureFloat(option: string): number | undefined;
    getFeatureNumber(option: string): number | undefined;
    isNvrFeature(option: string, device?: ProtectDeviceConfigTypes | ProtectNvrConfig): boolean;
    hasFeature(option: string, device?: ProtectDeviceConfigTypes | ProtectNvrConfig): boolean;
    logFeature(option: string, message: string): void;
}
