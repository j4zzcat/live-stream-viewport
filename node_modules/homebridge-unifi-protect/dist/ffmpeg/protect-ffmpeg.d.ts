/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
import { ChildProcessWithoutNullStreams } from "node:child_process";
import { Readable, Writable } from "node:stream";
import { EventEmitter } from "node:events";
import { HomebridgePluginLogging } from "homebridge-plugin-utils";
import { ProtectCamera } from "../devices/index.js";
import { ProtectNvr } from "../protect-nvr.js";
import { StreamRequestCallback } from "homebridge";
export declare class FfmpegProcess extends EventEmitter {
    protected callback: StreamRequestCallback | null;
    protected commandLineArgs: string[];
    private ffmpegTimeout?;
    hasError: boolean;
    isEnded: boolean;
    private isLogging;
    private isPrepared;
    isStarted: boolean;
    protected isVerbose: boolean;
    protected readonly log: HomebridgePluginLogging;
    protected readonly nvr: ProtectNvr;
    private readonly platform;
    protected process: ChildProcessWithoutNullStreams | null;
    protected protectCamera: ProtectCamera;
    private stderrBuffer;
    protected stderrLog: string[];
    constructor(protectCamera: ProtectCamera, commandLineArgs?: string[], callback?: StreamRequestCallback);
    protected prepareProcess(commandLineArgs?: string[], callback?: StreamRequestCallback): void;
    protected start(commandLineArgs?: string[], callback?: StreamRequestCallback, errorHandler?: (errorMessage: string) => Promise<void>): void;
    protected configureProcess(errorHandler?: (errorMessage: string) => Promise<void>): void;
    protected stopProcess(): void;
    stop(): void;
    protected logFfmpegError(exitCode: number, signal: NodeJS.Signals): void;
    get stdin(): Writable | null;
    get stdout(): Readable | null;
    get stderr(): Readable | null;
}
