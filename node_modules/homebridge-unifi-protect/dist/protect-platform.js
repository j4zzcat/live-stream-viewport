import { FeatureOptions, RtpPortAllocator } from "homebridge-plugin-utils";
import { PROTECT_FFMPEG_OPTIONS, PROTECT_MQTT_TOPIC } from "./settings.js";
import { featureOptionCategories, featureOptions } from "./protect-options.js";
import { FfmpegCodecs } from "./ffmpeg/index.js";
import { ProtectNvr } from "./protect-nvr.js";
import ffmpegPath from "ffmpeg-for-homebridge";
import os from "node:os";
import { platform } from "node:process";
import { readFileSync } from "node:fs";
import util from "node:util";
export class ProtectPlatform {
    accessories;
    api;
    codecSupport;
    config;
    controllers;
    featureOptions;
    log;
    rtpPorts;
    _hostSystem;
    verboseFfmpeg;
    constructor(log, config, api) {
        this._hostSystem = "";
        this.accessories = [];
        this.api = api;
        this.controllers = [];
        this.featureOptions = new FeatureOptions(featureOptionCategories, featureOptions, config?.options ?? []);
        this.log = log;
        this.rtpPorts = new RtpPortAllocator();
        this.verboseFfmpeg = false;
        // We can't start without being configured.
        if (!config) {
            return;
        }
        // Plugin options into our config variables.
        this.config = {
            controllers: config.controllers,
            debugAll: config.debug === true,
            ffmpegOptions: config.ffmpegOptions ?? PROTECT_FFMPEG_OPTIONS,
            options: config.options,
            ringDelay: config.ringDelay ?? 0,
            verboseFfmpeg: config.verboseFfmpeg === true,
            videoEncoder: config.videoEncoder,
            videoProcessor: config.videoProcessor ?? ffmpegPath ?? "ffmpeg"
        };
        // We need a UniFi Protect controller configured to do anything.
        if (!this.config.controllers) {
            this.log.info("No UniFi Protect controllers have been configured.");
            return;
        }
        // Debugging - most people shouldn't enable this.
        this.debug("Debug logging on. Expect a lot of data.");
        // Debug FFmpeg.
        if (this.config.verboseFfmpeg) {
            this.verboseFfmpeg = true;
            this.log.info("Verbose logging of video streaming sessions enabled. Expect a lot of data.");
        }
        // Loop through each configured NVR and instantiate it.
        for (const controllerConfig of this.config.controllers) {
            // We need an address, or there's nothing to do.
            if (!controllerConfig.address) {
                this.log.info("No host or IP address has been configured.");
                continue;
            }
            // We need login credentials or we're skipping this one.
            if (!controllerConfig.username || !controllerConfig.password) {
                this.log.info("No UniFi Protect login credentials have been configured.");
                continue;
            }
            // MQTT topic to use.
            if (!controllerConfig.mqttTopic) {
                controllerConfig.mqttTopic = PROTECT_MQTT_TOPIC;
            }
            this.controllers.push(new ProtectNvr(this, controllerConfig));
        }
        // Identify what we're running on so we can take advantage of hardware-specific features.
        this.probeHwOs();
        // Probe our FFmpeg capabilities.
        this.codecSupport = new FfmpegCodecs(this);
        // Avoid a prospective race condition by waiting to configure our controllers until Homebridge is done loading all the cached accessories it knows about, and calling
        // configureAccessory() on each.
        api.on("didFinishLaunching" /* APIEvent.DID_FINISH_LAUNCHING */, this.launchControllers.bind(this));
    }
    // This gets called when homebridge restores cached accessories at startup. We intentionally avoid doing anything significant here, and save it for device discovery.
    configureAccessory(accessory) {
        // Add this to the accessory array so we can track it.
        this.accessories.push(accessory);
    }
    // Launch our configured controllers once all accessories have been loaded. Once we do, they will sustain themselves.
    async launchControllers() {
        // First things first - ensure we've got a working video processor before we do anything else.
        if (!(await this.codecSupport.probe())) {
            return;
        }
        // Iterate through all our controllers and startup.
        for (const controller of this.controllers) {
            // Login to the Protect controller.
            void controller.login();
        }
    }
    // Identify what hardware and operating system environment we're actually running on.
    probeHwOs() {
        // Start off with a generic identifier.
        this._hostSystem = "generic";
        // Take a look at the platform we're on for an initial hint of what we are.
        switch (platform) {
            // The beloved macOS.
            case "darwin":
                this._hostSystem = "macOS." + (os.cpus()[0].model.includes("Apple") ? "Apple" : "Intel");
                break;
            // The indomitable Linux.
            case "linux":
                // Let's further see if we're a small, but scrappy, Raspberry Pi.
                try {
                    // As of the 4.9 kernel, Raspberry Pi prefers to be identified using this method and has deprecated cpuinfo.
                    const systemId = readFileSync("/sys/firmware/devicetree/base/model", { encoding: "utf8" });
                    // Is it a Pi 4?
                    if (/Raspberry Pi (Compute Module )?4/.test(systemId)) {
                        this._hostSystem = "raspbian";
                    }
                }
                catch (error) {
                    // We aren't especially concerned with errors here, given we're just trying to ascertain the system information through hints.
                }
                break;
            default:
                // We aren't trying to solve for every system type.
                break;
        }
    }
    // Utility to return the hardware environment we're on.
    get hostSystem() {
        return this._hostSystem;
    }
    // Utility for debug logging.
    debug(message, ...parameters) {
        if (this.config.debugAll) {
            this.log.info(util.format(message, ...parameters));
        }
    }
}
//# sourceMappingURL=protect-platform.js.map