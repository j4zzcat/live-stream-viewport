/* Copyright(C) 2019-2024, HJD (https://github.com/hjdhjd). All rights reserved.
 *
 * protect-livestream.ts: Protect livestream API manager.
 */
import { PROTECT_HKSV_SEGMENT_RESOLUTION } from "./settings.js";
import { retry } from "homebridge-plugin-utils";
export class LivestreamManager {
    livestreams;
    protectCamera;
    subscriberCount;
    // Create an instance.
    constructor(protectCamera) {
        this.protectCamera = protectCamera;
        this.subscriberCount = {};
        this.livestreams = {};
    }
    // Utility to return an index into our livestream connection pool.
    getIndex(channel, lens) {
        // If we're using a secondary lens, the channel must always be 0 when using the livestream API.
        if (lens !== undefined) {
            channel = 0;
        }
        return { channel: channel, index: channel.toString() + ((lens !== undefined) ? "." + lens.toString() : ""), lens: lens };
    }
    // Retrieve a connection to the livestream API for a given channel.
    acquire(channel, lens) {
        const { index } = this.getIndex(channel, lens);
        // Let's see if we have an existing livestream already open and reuse it if we can.
        if (this.livestreams[index]) {
            return this.livestreams[index];
        }
        // Create a new livestream instance.
        this.subscriberCount[index] = 0;
        return this.livestreams[index] = this.protectCamera.nvr.ufpApi.createLivestream();
    }
    // Access the livestream API, registering as a consumer.
    async start(channel, lens, segmentLength = PROTECT_HKSV_SEGMENT_RESOLUTION) {
        let index;
        ({ channel, index, lens } = this.getIndex(channel, lens));
        // If we don't have a livestream configured for this channel, we're done. We could just create it here, but given we listen to events on livestream listeners, this
        // is a safer option to ensure that we've acquired a livestream endpoint before trying to start it.
        if (!this.livestreams[index]) {
            return false;
        }
        // Start the livestream if this is the first run. We set this to reattempt establishing the livestream up to three times due to occasional controller glitches.
        if (!this.subscriberCount[index] && !(await retry(async () => this.livestreams[index].start(this.protectCamera.ufp.id, channel, lens, segmentLength, this.protectCamera.name + ":" + index), 1000, 3))) {
            this.protectCamera.log.error("Unable to access the Protect livestream API: this is typically due to the Protect controller or camera rebooting.");
            await this.protectCamera.nvr.resetNvrConnection();
            // Something went wrong in communicating with the controller.
            return false;
        }
        // Increment our consumer count.
        this.subscriberCount[index]++;
        return true;
    }
    // End a livestream API connection once all the consumers of the livestream are done.
    stop(channel, lens) {
        const { index } = this.getIndex(channel, lens);
        // If we have open livestreams, we'll won't close the livestream.
        if (--this.subscriberCount[index] > 0) {
            return;
        }
        // End our livestream API connection.
        this.livestreams[index].stop();
        this.subscriberCount[index] = 0;
    }
}
//# sourceMappingURL=protect-livestream.js.map