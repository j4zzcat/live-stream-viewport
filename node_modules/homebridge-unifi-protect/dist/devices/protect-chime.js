import { ProtectReservedNames, toCamelCase } from "../protect-types.js";
import { PROTECT_DOORBELL_CHIME_SPEAKER_DURATION } from "../settings.js";
import { ProtectDevice } from "./protect-device.js";
export class ProtectChime extends ProtectDevice {
    eventTimers;
    ufp;
    // Create an instance.
    constructor(nvr, device, accessory) {
        super(nvr, accessory);
        this.eventTimers = {};
        this.ufp = device;
        this.configureHints();
        this.configureDevice();
    }
    // Initialize and configure the chime accessory for HomeKit.
    configureDevice() {
        // Clean out the context object in case it's been polluted somehow.
        this.accessory.context = {};
        this.accessory.context.mac = this.ufp.mac;
        this.accessory.context.nvr = this.nvr.ufp.mac;
        // Configure accessory information.
        this.configureInfo();
        // Configure the chime as a light. We don't have volume accessories, so a dimmer is the best we can currently do within the constraints of HomeKit.
        this.configureLightbulb();
        // Configure the speakers on the chime.
        this.configureChimeSwitch("chime", "play-speaker", ProtectReservedNames.SWITCH_DOORBELL_CHIME_SPEAKER);
        this.configureChimeSwitch("buzzer", "play-buzzer", ProtectReservedNames.SWITCH_DOORBELL_CHIME_BUZZER);
        // Configure MQTT services.
        this.configureMqtt();
        // Listen for events.
        this.nvr.events.on("updateEvent." + this.ufp.id, this.listeners["updateEvent." + this.ufp.id] = this.eventHandler.bind(this));
        return true;
    }
    // Configure the light for HomeKit.
    configureLightbulb() {
        // Acquire the service.
        const service = this.acquireService(this.hap.Service.Lightbulb);
        if (!service) {
            this.log.error("Unable to add chime.");
            return false;
        }
        // Turn the chime on or off.
        service.getCharacteristic(this.hap.Characteristic.On)?.onGet(() => {
            return this.ufp.volume > 0;
        });
        service.getCharacteristic(this.hap.Characteristic.On)?.onSet(async (value) => {
            // We really only want to act when the chime is turned off. Otherwise, it's handled by the brightness event.
            if (value) {
                return;
            }
            const newDevice = await this.nvr.ufpApi.updateDevice(this.ufp, { volume: 0 });
            if (!newDevice) {
                this.log.error("Unable to turn the volume off. Please ensure this username has the Administrator role in UniFi Protect.");
                return;
            }
            // Set the context to our updated device configuration.
            this.ufp = newDevice;
        });
        // Adjust the volume of the chime by adjusting brightness of the light.
        service.getCharacteristic(this.hap.Characteristic.Brightness)?.onGet(() => {
            // Return the volume level of the chime.
            return this.ufp.volume;
        });
        service.getCharacteristic(this.hap.Characteristic.Brightness)?.onSet(async (value) => {
            const newDevice = await this.nvr.ufpApi.updateDevice(this.ufp, { volume: value });
            if (!newDevice) {
                this.log.error("Unable to adjust the volume to %s%. Please ensure this username has the Administrator role in UniFi Protect.", value);
                return;
            }
            // Set the context to our updated device configuration.
            this.ufp = newDevice;
            this.publish("chime", this.ufp.volume.toString());
        });
        // Initialize the chime.
        service.updateCharacteristic(this.hap.Characteristic.On, this.ufp.volume > 0);
        service.updateCharacteristic(this.hap.Characteristic.Brightness, this.ufp.volume);
        return true;
    }
    // Configure chime speaker switches for HomeKit.
    configureChimeSwitch(name, endpoint, subtype) {
        // Acquire the service.
        const service = this.acquireService(this.hap.Service.Switch, this.accessoryName + " " + toCamelCase(name), subtype);
        if (!service) {
            this.log.error("Unable to add " + name + " switch.");
            return false;
        }
        // Turn the speaker on or off.
        service.getCharacteristic(this.hap.Characteristic.On)?.onGet(() => {
            return !!this.eventTimers[endpoint];
        });
        service.getCharacteristic(this.hap.Characteristic.On)?.onSet(async (value) => {
            // We only want to do something if we're being activated and we don't have an active speaker event inflight. Turning off the switch would really be a meaningless
            // state given you can't undo the play command to the chime.
            if (!value) {
                setTimeout(() => service.updateCharacteristic(this.hap.Characteristic.On, !!this.eventTimers[endpoint]), 50);
                return;
            }
            // Play the tone.
            if (!(await this.playTone(name, endpoint))) {
                this.log.error("Unable to play " + name + ".");
                setTimeout(() => service.updateCharacteristic(this.hap.Characteristic.On, !!this.eventTimers[endpoint]), 50);
            }
            this.eventTimers[endpoint] = setTimeout(() => {
                delete this.eventTimers[endpoint];
                service.updateCharacteristic(this.hap.Characteristic.On, !!this.eventTimers[endpoint]);
            }, PROTECT_DOORBELL_CHIME_SPEAKER_DURATION);
            // Inform the user.
            this.log.info("Playing %s.", name);
        });
        // Initialize the switch.
        service.updateCharacteristic(this.hap.Characteristic.On, false);
        return true;
    }
    // Play the specified tone on the chime.
    async playTone(name, endpoint) {
        if (!endpoint) {
            return false;
        }
        // Execute teh action on the chime.
        const response = await this.nvr.ufpApi.retrieve(this.nvr.ufpApi.getApiEndpoint(this.ufp.modelKey) + "/" + this.ufp.id + "/" + endpoint, {
            body: JSON.stringify({}),
            method: "POST"
        });
        // Something went wrong.
        if (!response?.ok) {
            return false;
        }
        // Publish what we're playing.
        this.publish("tone", name);
        return true;
    }
    // Configure MQTT capabilities of this chime.
    configureMqtt() {
        // Get and set the chime volume.
        this.subscribeGet("chime", "chime volume", () => {
            return this.ufp.volume.toString();
        });
        this.subscribeSet("chime", "chime volume", (value) => {
            const volume = parseInt(value.toString());
            // Unknown message - ignore it.
            if (isNaN(volume) || (volume < 0) || (volume > 100)) {
                return;
            }
            // We explicitly want to trigger our set event handler, which will complete this action.
            this.accessory.getService(this.hap.Service.Lightbulb)?.getCharacteristic(this.hap.Characteristic.Brightness)?.setValue(volume);
            this.accessory.getService(this.hap.Service.Lightbulb)?.getCharacteristic(this.hap.Characteristic.On)?.setValue(volume > 0);
        });
        // Play a tone on the chime.
        this.subscribeSet("tone", "chime tone", (value) => {
            switch (value) {
                case "chime":
                    void this.playTone("chime", "play-speaker");
                    break;
                case "buzzer":
                    void this.playTone("buzzer", "play-buzzer");
                    break;
                default:
                    this.log.error("Unknown chime tone.");
                    break;
            }
        });
        return true;
    }
    // Handle chime-related events.
    eventHandler(packet) {
        const payload = packet.payload;
        // It's a volume setting event - process it accordingly.
        if ("volume" in payload) {
            // Update our volume setting.
            this.accessory.getService(this.hap.Service.Lightbulb)?.updateCharacteristic(this.hap.Characteristic.Brightness, payload.volume);
            this.accessory.getService(this.hap.Service.Lightbulb)?.updateCharacteristic(this.hap.Characteristic.On, payload.volume > 0);
            this.publish("chime", (payload.volume ?? 0).toString());
        }
    }
}
//# sourceMappingURL=protect-chime.js.map