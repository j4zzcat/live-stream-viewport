import { API, HAP, PlatformAccessory, Service, WithUUID } from "homebridge";
import { ProtectApi, ProtectEventPacket, ProtectNvrConfig } from "unifi-protect";
import { ProtectDeviceConfigTypes } from "../protect-types.js";
import { HomebridgePluginLogging } from "homebridge-plugin-utils";
import { ProtectNvr } from "../protect-nvr.js";
import { ProtectPlatform } from "../protect-platform.js";
export interface ProtectHints {
    apiStreaming: boolean;
    crop: boolean;
    cropOptions: {
        height: number;
        width: number;
        x: number;
        y: number;
    };
    enabled: boolean;
    hardwareDecoding: boolean;
    hardwareTranscoding: boolean;
    highResSnapshots: boolean;
    ledStatus: boolean;
    logDoorbell: boolean;
    logHksv: boolean;
    logMotion: boolean;
    motionDuration: number;
    occupancyDuration: number;
    probesize: number;
    recordingDefault: string;
    smartDetect: boolean;
    smartOccupancy: string[];
    standalone: boolean;
    streamingDefault: string;
    syncName: boolean;
    timeshift: boolean;
    transcode: boolean;
    transcodeBitrate: number;
    transcodeHighLatency: boolean;
    transcodeHighLatencyBitrate: number;
    twoWayAudio: boolean;
}
export declare abstract class ProtectBase {
    readonly api: API;
    private debug;
    protected readonly hap: HAP;
    readonly log: HomebridgePluginLogging;
    readonly nvr: ProtectNvr;
    ufpApi: ProtectApi;
    readonly platform: ProtectPlatform;
    constructor(nvr: ProtectNvr);
    protected setInfo(accessory: PlatformAccessory, device: ProtectDeviceConfigTypes | ProtectNvrConfig): boolean;
    get name(): string;
}
export declare abstract class ProtectDevice extends ProtectBase {
    accessory: PlatformAccessory;
    hints: ProtectHints;
    protected listeners: {
        [index: string]: (packet: ProtectEventPacket) => void;
    };
    ufp: ProtectDeviceConfigTypes;
    constructor(nvr: ProtectNvr, accessory: PlatformAccessory);
    protected acquireService(serviceType: WithUUID<typeof Service>, name?: string, subtype?: string, onServiceCreate?: (svc: Service) => void): Service | null;
    protected validService(serviceType: WithUUID<typeof Service>, validate: () => boolean, subtype?: string): boolean;
    protected configureHints(): boolean;
    configureInfo(): boolean;
    cleanup(): void;
    protected publish(topic: string, message: string): void;
    protected subscribeGet(topic: string, type: string, getValue: () => string): void;
    protected subscribeSet(topic: string, type: string, setValue: (value: string, rawValue: string) => Promise<void> | void): void;
    protected configureMotionSensor(isEnabled?: boolean, isInitialized?: boolean): boolean;
    private configureMotionSwitch;
    private configureMotionTrigger;
    protected configureOccupancySensor(isEnabled?: boolean, isInitialized?: boolean): boolean;
    getFeatureFloat(option: string): number | undefined;
    getFeatureNumber(option: string): number | undefined;
    getFeatureValue(option: string): string | undefined;
    hasFeature(option: string): boolean;
    isDeviceFeature(option: string): boolean;
    logFeature(option: string, message: string, nvrMessage?: string): void;
    isReservedName(name?: string): boolean;
    get isOnline(): boolean;
    get id(): string;
    get name(): string;
    get accessoryName(): string;
    set accessoryName(name: string);
}
