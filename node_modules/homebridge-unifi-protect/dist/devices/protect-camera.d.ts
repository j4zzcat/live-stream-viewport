import { PlatformAccessory, Resolution } from "homebridge";
import { ProtectCameraChannelConfig, ProtectCameraConfig, ProtectEventPacket } from "unifi-protect";
import { LivestreamManager } from "../protect-livestream.js";
import { ProtectDevice } from "./protect-device.js";
import { ProtectNvr } from "../protect-nvr.js";
import { ProtectStreamingDelegate } from "../protect-stream.js";
export interface RtspEntry {
    channel: ProtectCameraChannelConfig;
    lens?: number;
    name: string;
    resolution: Resolution;
    url: string;
}
type RtspOptions = Partial<{
    biasHigher: boolean;
    default: string;
    maxPixels: number;
    rtspEntries: RtspEntry[];
}>;
export declare class ProtectCamera extends ProtectDevice {
    hasHksv: boolean;
    private isDeleted;
    isRinging: boolean;
    detectLicensePlate: string[];
    readonly livestream: LivestreamManager;
    private rtspEntries;
    private rtspQuality;
    stream: ProtectStreamingDelegate;
    ufp: ProtectCameraConfig;
    constructor(nvr: ProtectNvr, device: ProtectCameraConfig, accessory: PlatformAccessory);
    protected configureHints(): boolean;
    protected configureDevice(): Promise<boolean>;
    cleanup(): void;
    protected eventHandler(packet: ProtectEventPacket): void;
    private smartMotionEventHandler;
    private configureMotionSmartSensor;
    private configureDoorbellTrigger;
    protected configureVideoDoorbell(): boolean;
    private configureCameraDetails;
    private configureCrop;
    private configureVideoStream;
    private configureHksv;
    private configureHksvRecordingSwitch;
    private configureNvrRecordingSwitch;
    protected configureMqtt(): boolean;
    updateDevice(): boolean;
    private findRtspEntry;
    findRtsp(width: number, height: number, options?: RtspOptions): RtspEntry | null;
    findRecordingRtsp(width: number, height: number): RtspEntry | null;
    private sortByResolutions;
    protected getResolution(resolution: Resolution): string;
}
export {};
