import { CameraController, CameraStreamingDelegate, PrepareStreamCallback, PrepareStreamRequest, SnapshotRequest, SnapshotRequestCallback, StreamRequestCallback, StreamingRequest } from "homebridge";
import { FfmpegOptions } from "./ffmpeg/index.js";
import { HomebridgePluginLogging } from "homebridge-plugin-utils";
import { ProtectCamera } from "./devices/index.js";
import { ProtectPlatform } from "./protect-platform.js";
import { ProtectRecordingDelegate } from "./protect-record.js";
export declare class ProtectStreamingDelegate implements CameraStreamingDelegate {
    private readonly api;
    controller: CameraController;
    readonly ffmpegOptions: FfmpegOptions;
    private readonly hap;
    hksv: ProtectRecordingDelegate | null;
    readonly log: HomebridgePluginLogging;
    private readonly nvr;
    private ongoingSessions;
    private pendingSessions;
    readonly platform: ProtectPlatform;
    readonly protectCamera: ProtectCamera;
    private probesizeOverride;
    private probesizeOverrideCount;
    private probesizeOverrideTimeout?;
    private snapshot;
    verboseFfmpeg: boolean;
    private abTest;
    constructor(protectCamera: ProtectCamera, resolutions: [number, number, number][]);
    handleSnapshotRequest(request?: SnapshotRequest, callback?: SnapshotRequestCallback): Promise<void>;
    prepareStream(request: PrepareStreamRequest, callback: PrepareStreamCallback): Promise<void>;
    private startStream;
    handleStreamRequest(request: StreamingRequest, callback: StreamRequestCallback): Promise<void>;
    stopStream(sessionId: string): Promise<void>;
    shutdown(): Promise<void>;
    adjustProbeSize(): void;
    get probesize(): number;
}
