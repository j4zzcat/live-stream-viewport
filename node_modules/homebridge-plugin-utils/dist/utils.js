/* Copyright(C) 2017-2024, HJD (https://github.com/hjdhjd). All rights reserved.
 *
 * utils.ts: Useful utility functions when writing TypeScript.
 */
// Retry an operation until we're successful.
export async function retry(operation, retryInterval, totalRetries) {
    if ((totalRetries !== undefined) && (totalRetries < 0)) {
        return false;
    }
    // Try the operation that was requested.
    if (!(await operation())) {
        // If the operation wasn't successful, let's sleep for the requested interval and try again.
        await sleep(retryInterval);
        return retry(operation, retryInterval, (totalRetries === undefined) ? undefined : totalRetries--);
    }
    // We were successful - we're done.
    return true;
}
// Run a promise with a guaranteed timeout to complete.
export async function runWithTimeout(promise, timeout) {
    const timeoutPromise = new Promise((resolve) => setTimeout(() => resolve(null), timeout));
    return Promise.race([promise, timeoutPromise]);
}
// Emulate a sleep function.
export async function sleep(sleepTimer) {
    return new Promise(resolve => setTimeout(resolve, sleepTimer));
}
//# sourceMappingURL=utils.js.map