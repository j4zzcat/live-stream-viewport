/// <reference types="node" />
/**
 * @internal
 *
 * A utility type that recursively makes all properties of an object, including nested objects, optional. This should only be used on JSON objects only. Otherwise,
 * you're going to end up with class methods marked as optional as well. Credit for this belongs to: https://github.com/joonhocho/tsdef.
 *
 * @template T - The type to make recursively partial.
 */
export type DeepPartial<T> = {
    [P in keyof T]?: T[P] extends Array<infer I> ? Array<DeepPartial<I>> : DeepPartial<T[P]>;
};
/**
 * @internal
 *
 * A utility type that recursively makes all properties of an object, including nested objects, optional. This should only be used on JSON objects only. Otherwise,
 * you're going to end up with class methods marked as optional as well. Credit for this belongs to: https://github.com/joonhocho/tsdef.
 *
 * @template T - The type to make recursively partial.
 */
export type DeepReadonly<T> = {
    readonly [P in keyof T]: T[P] extends Array<infer I> ? Array<DeepReadonly<I>> : DeepReadonly<T[P]>;
};
export interface HomebridgePluginLogging {
    debug: (message: string, ...parameters: unknown[]) => void;
    error: (message: string, ...parameters: unknown[]) => void;
    info: (message: string, ...parameters: unknown[]) => void;
    warn: (message: string, ...parameters: unknown[]) => void;
}
export declare function retry(operation: () => Promise<boolean>, retryInterval: number, totalRetries?: number): Promise<boolean>;
export declare function runWithTimeout<T>(promise: Promise<T>, timeout: number): Promise<T | null>;
export declare function sleep(sleepTimer: number): Promise<NodeJS.Timeout>;
